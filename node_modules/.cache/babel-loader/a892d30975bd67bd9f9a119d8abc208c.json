{"remainingRequest":"/Users/crocslut/Desktop/Git/primevue/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/primevue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/primevue/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/primevue/src/views/treetable/TreeTableLazyDemo.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/crocslut/Desktop/Git/primevue/src/views/treetable/TreeTableLazyDemo.vue","mtime":1634633311636},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/cache-loader/dist/cjs.js","mtime":1634631121968},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/babel-loader/lib/index.js","mtime":1634631121902},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/cache-loader/dist/cjs.js","mtime":1634631121968},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/vue-loader-v16/dist/index.js","mtime":1634631132147}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/primevue/src/views/treetable/TreeTableLazyDemo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Lazy</span></h1>\n                <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition,\n                    children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n                    @node-expand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column field=\"size\" header=\"Size\"></Column>\n                    <Column field=\"type\" header=\"Type\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTableLazyDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTableLazyDemo.vue\" />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n            @nodeExpand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n            @nodeExpand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(0, rows.value);\n                totalRecords.value = 1000;\n            }, 1000);\n        })\n        const nodes = ref();\n        const rows = ref(10);\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const onExpand = (node) => {\n            if (!node.children) {\n                loading.value = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let newNodes = nodes.value.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    loading.value = false;\n                    nodes.value = newNodes;\n                }, 250);\n            }\n        };\n        const onPage = (event) => {\n            loading.value = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(event.first, rows.value);\n            }, 1000);\n        };\n        const loadNodes = (first, rows) => {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n\n        return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n    }\n    \n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-treetable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n                @node-expand=\"onExpand\" @page=\"onPage\" :total-records=\"totalRecords\">\n                <p-column field=\"name\" header=\"Name\" :expander=\"true\"></p-column>\n                <p-column field=\"size\" header=\"Size\"></p-column>\n                <p-column field=\"type\" header=\"Type\"></p-column>\n            </p-treetable>\n        </div>                   \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(0, rows.value);\n                        totalRecords.value = 1000;\n                    }, 1000);\n                })\n                const nodes = ref();\n                const rows = ref(10);\n                const loading = ref(false);\n                const totalRecords = ref(0);\n                const onExpand = (node) => {\n                    if (!node.children) {\n                        loading.value = true;\n\n                        setTimeout(() => {\n                            let lazyNode = {...node};\n\n                            lazyNode.children = [\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + ' - 0',\n                                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                        type: 'File'\n                                    },\n                                },\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + ' - 1',\n                                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                        type: 'File'\n                                    }\n                                }\n                            ];\n\n                            let newNodes = nodes.value.map(n => {\n                                if (n.key === node.key) {\n                                    n = lazyNode;\n                                }\n\n                                return n;\n                            });\n\n                            loading.value = false;\n                            nodes.value = newNodes;\n                        }, 250);\n                    }\n                };\n                const onPage = (event) => {\n                    loading.value = true;\n\n                    //imitate delay of a backend call\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(event.first, rows.value);\n                    }, 1000);\n                };\n                const loadNodes = (first, rows) => {\n                    let nodes = [];\n\n                    for(let i = 0; i < rows; i++) {\n                        let node = {\n                            key: (first + i),\n                            data: {\n                                name: 'Item ' + (first + i),\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'Type ' + (first + i)\n                            },\n                            leaf: false\n                        };\n\n                        nodes.push(node);\n                    }\n\n                    return nodes;\n                }\n\n                return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column\n            }\n        };\n        \n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}