{"remainingRequest":"/Users/crocslut/Desktop/Git/primevue/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/primevue/src/AppConfigurator.vue?vue&type=template&id=ce24a3e6","dependencies":[{"path":"/Users/crocslut/Desktop/Git/primevue/src/AppConfigurator.vue","mtime":1634636488268},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/cache-loader/dist/cjs.js","mtime":1634631121968},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/babel-loader/lib/index.js","mtime":1634631121902},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634631132147},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/cache-loader/dist/cjs.js","mtime":1634631121968},{"path":"/Users/crocslut/Desktop/Git/primevue/node_modules/vue-loader-v16/dist/index.js","mtime":1634631132147}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2IDpjbGFzcz0iY29udGFpbmVyQ2xhc3MiPgogICAgPC9kaXY+Cg=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/primevue/src/AppConfigurator.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/crocslut/Desktop/Git/primevue/src/AppConfigurator.vue","sourceRoot":"","sourcesContent":["<template>\n    <div :class=\"containerClass\">\n    </div>\n</template>\n\n<script>\nimport EventBus from '@/AppEventBus';\n\nexport default {\n    props: {\n        theme: String,\n        inputStyle: String\n    },\n    data() {\n        return {\n            active: false,\n            scale: 14,\n            scales: [12,13,14,15,16]\n        }\n    },\n    outsideClickListener: null,\n    themeChangeListener: null,\n    watch: {\n        $route() {\n            if (this.active) {\n                this.active = false;\n                this.unbindOutsideClickListener();\n            }\n        }\n    },\n    beforeUnmount() {\n        EventBus.off('change-theme', this.themeChangeListener);\n    },\n    mounted() {\n        this.themeChangeListener = (event) => {\n            if (event.theme === 'nano')\n                this.scale = 12;\n            else\n                this.scale = 14;\n\n            this.applyScale();\n        };\n\n        EventBus.on('change-theme', this.themeChangeListener);\n    },\n    methods: {\n        toggleConfigurator(event) {\n            this.active = !this.active;\n            event.preventDefault();\n\n            if (this.active)\n                this.bindOutsideClickListener();\n            else\n                this.unbindOutsideClickListener();\n        },\n        hideConfigurator(event) {\n            this.active = false;\n            this.unbindOutsideClickListener();\n            event.preventDefault();\n        },\n        changeTheme(event, theme, dark) {\n            this.$emit('change-theme', {theme: theme, dark: dark});\n            event.preventDefault();\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.active && this.isOutsideClicked(event)) {\n                        this.active = false;\n                    }\n                };\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target));\n        },\n        decrementScale() {\n            this.scale--;\n            this.applyScale();\n        },\n        incrementScale() {\n            this.scale++;\n            this.applyScale();\n        },\n        applyScale() {\n            document.documentElement.style.fontSize = this.scale + 'px';\n        },\n        onRippleChange(value) {\n            this.$primevue.config.ripple = value;\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['layout-config', {'layout-config-active': this.active}];\n        },\n        rippleActive() {\n            return this.$primevue.config.ripple;\n        }\n    }\n}\n</script>\n"]}]}